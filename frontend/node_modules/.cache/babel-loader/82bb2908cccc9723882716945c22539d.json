{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\kamatechP\\\\memories\\\\frontend2\\\\src\\\\components\\\\login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport { Calendar } from 'primereact/calendar';\nimport { Password } from 'primereact/password';\nimport { Checkbox } from 'primereact/checkbox';\nimport { Dialog } from 'primereact/dialog';\nimport { Divider } from 'primereact/divider';\nimport { classNames } from 'primereact/utils';\nimport \"../App.css\";\nimport \"../index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ReactHookFormDemo = () => {\n  _s();\n\n  const [showMessage, setShowMessage] = useState(false);\n  const [formData, setFormData] = useState({});\n  const defaultValues = {\n    name: '',\n    email: '',\n    password: '',\n    date: null,\n    country: null,\n    accept: false\n  };\n  const {\n    control,\n    formState: {\n      errors\n    },\n    handleSubmit,\n    reset\n  } = useForm({\n    defaultValues\n  });\n\n  const onSubmit = data => {\n    setFormData(data);\n    setShowMessage(true);\n    reset();\n  };\n\n  const getFormErrorMessage = name => {\n    return errors[name] && /*#__PURE__*/_jsxDEV(\"small\", {\n      className: \"p-error\",\n      children: errors[name].message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 32\n    }, this);\n  };\n\n  const dialogFooter = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-d-flex p-jc-center\",\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      label: \"OK\",\n      className: \"p-button-text\",\n      autoFocus: true,\n      onClick: () => setShowMessage(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 64\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 26\n  }, this);\n\n  const passwordHeader = /*#__PURE__*/_jsxDEV(\"h6\", {\n    children: \"Pick a password\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 28\n  }, this);\n\n  const passwordFooter = /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"p-mt-2\",\n      children: \"Suggestions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"p-pl-2 p-ml-2 p-mt-0\",\n      style: {\n        lineHeight: '1.5'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"At least one lowercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"At least one uppercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"At least one numeric\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Minimum 8 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5 \",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-demo col-lg-6\",\n      children: [/*#__PURE__*/_jsxDEV(Dialog, {\n        visible: showMessage,\n        onHide: () => setShowMessage(false),\n        position: \"top\",\n        footer: dialogFooter,\n        showHeader: false,\n        breakpoints: {\n          '960px': '80vw'\n        },\n        style: {\n          width: '30vw'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p-d-flex p-ai-center p-dir-col p-pt-6 p-px-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"pi pi-check-circle\",\n            style: {\n              fontSize: '5rem',\n              color: 'var(--green-500)'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Registration Successful!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              lineHeight: 1.5,\n              textIndent: '1rem'\n            },\n            children: [\"Your account is registered under name \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: formData.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 67\n            }, this), \" ; it'll be valid next 30 days without activation. Please check \", /*#__PURE__*/_jsxDEV(\"b\", {\n              children: formData.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 153\n            }, this), \" for activation instructions.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-d-flex p-jc-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"p-text-center h1\",\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit(onSubmit),\n            className: \"p-fluid\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"p-float-label\",\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"name\",\n                  control: control,\n                  rules: {\n                    required: 'Name is required.'\n                  },\n                  render: _ref => {\n                    let {\n                      field,\n                      fieldState\n                    } = _ref;\n                    return /*#__PURE__*/_jsxDEV(InputText, {\n                      id: field.name,\n                      ...field,\n                      autoFocus: true,\n                      className: classNames({\n                        'p-invalid': fieldState.invalid\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 78,\n                      columnNumber: 41\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"name\",\n                  className: classNames({\n                    'p-error': errors.name\n                  }),\n                  children: \"Name*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 80,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 33\n              }, this), getFormErrorMessage('name')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"p-float-label p-input-icon-right\",\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"pi pi-envelope\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"email\",\n                  control: control,\n                  rules: {\n                    required: 'Email is required.',\n                    pattern: {\n                      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                      message: 'Invalid email address. E.g. example@email.com'\n                    }\n                  },\n                  render: _ref2 => {\n                    let {\n                      field,\n                      fieldState\n                    } = _ref2;\n                    return /*#__PURE__*/_jsxDEV(InputText, {\n                      id: field.name,\n                      ...field,\n                      className: classNames({\n                        'p-invalid': fieldState.invalid\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 90,\n                      columnNumber: 45\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"email\",\n                  className: classNames({\n                    'p-error': !!errors.email\n                  }),\n                  children: \"Email*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 33\n              }, this), getFormErrorMessage('email')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-field\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"p-float-label\",\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"password\",\n                  control: control,\n                  rules: {\n                    required: 'Password is required.'\n                  },\n                  render: _ref3 => {\n                    let {\n                      field,\n                      fieldState\n                    } = _ref3;\n                    return /*#__PURE__*/_jsxDEV(Password, {\n                      id: field.name,\n                      ...field,\n                      toggleMask: true,\n                      className: classNames({\n                        'p-invalid': fieldState.invalid\n                      }),\n                      header: passwordHeader,\n                      footer: passwordFooter\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 99,\n                      columnNumber: 41\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"password\",\n                  className: classNames({\n                    'p-error': errors.password\n                  }),\n                  children: \"Password*\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 33\n              }, this), getFormErrorMessage('password')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-field\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"p-float-label\",\n                children: [/*#__PURE__*/_jsxDEV(Controller, {\n                  name: \"date\",\n                  control: control,\n                  render: _ref4 => {\n                    let {\n                      field\n                    } = _ref4;\n                    return /*#__PURE__*/_jsxDEV(Calendar, {\n                      id: field.name,\n                      value: field.value,\n                      onChange: e => field.onChange(e.value),\n                      dateFormat: \"dd/mm/yy\",\n                      mask: \"99/99/9999\",\n                      showIcon: true\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 108,\n                      columnNumber: 41\n                    }, this);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"date\",\n                  children: \"Birthday\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-field-checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(Controller, {\n                name: \"accept\",\n                control: control,\n                rules: {\n                  required: true\n                },\n                render: _ref5 => {\n                  let {\n                    field,\n                    fieldState\n                  } = _ref5;\n                  return /*#__PURE__*/_jsxDEV(Checkbox, {\n                    inputId: field.name,\n                    onChange: e => field.onChange(e.checked),\n                    checked: field.value,\n                    className: classNames({\n                      'p-invalid': fieldState.invalid\n                    })\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 37\n                  }, this);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"accept\",\n                className: classNames({\n                  'p-error': errors.accept\n                }),\n                children: \"I agree to the terms and conditions*\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              label: \"Submit\",\n              className: \"p-mt-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ReactHookFormDemo, \"R99HtwnsoCOCg0htdaWBYEldCcM=\", false, function () {\n  return [useForm];\n});\n\n_c = ReactHookFormDemo;\nexport default ReactHookFormDemo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ReactHookFormDemo\");","map":{"version":3,"sources":["C:/projects/kamatechP/memories/frontend2/src/components/login.js"],"names":["React","useState","useForm","Controller","InputText","Button","Calendar","Password","Checkbox","Dialog","Divider","classNames","ReactHookFormDemo","showMessage","setShowMessage","formData","setFormData","defaultValues","name","email","password","date","country","accept","control","formState","errors","handleSubmit","reset","onSubmit","data","getFormErrorMessage","message","dialogFooter","passwordHeader","passwordFooter","lineHeight","width","fontSize","color","textIndent","required","field","fieldState","invalid","pattern","value","e","onChange","checked"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { Button } from 'primereact/button';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport { Password } from 'primereact/password';\r\nimport { Checkbox } from 'primereact/checkbox';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport { Divider } from 'primereact/divider';\r\nimport { classNames } from 'primereact/utils';\r\nimport  \"../App.css\";\r\nimport \"../index.css\";\r\n\r\nconst ReactHookFormDemo = () => {\r\n    \r\n    const [showMessage, setShowMessage] = useState(false);\r\n    const [formData, setFormData] = useState({});\r\n\r\n    const defaultValues = {\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        date: null,\r\n        country: null,\r\n        accept: false\r\n    }\r\n\r\n   \r\n\r\n    const { control, formState: { errors }, handleSubmit, reset } = useForm({ defaultValues });\r\n\r\n    const onSubmit = (data) => {\r\n        setFormData(data);\r\n        setShowMessage(true);\r\n\r\n        reset();\r\n    };\r\n\r\n    const getFormErrorMessage = (name) => {\r\n        return errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    };\r\n\r\n    const dialogFooter = <div className=\"p-d-flex p-jc-center\"><Button label=\"OK\" className=\"p-button-text\" autoFocus onClick={() => setShowMessage(false)} /></div>;\r\n    const passwordHeader = <h6>Pick a password</h6>;\r\n    const passwordFooter = (\r\n        <React.Fragment>\r\n            <Divider />\r\n            <p className=\"p-mt-2\">Suggestions</p>\r\n            <ul className=\"p-pl-2 p-ml-2 p-mt-0\" style={{ lineHeight: '1.5' }}>\r\n                <li>At least one lowercase</li>\r\n                <li>At least one uppercase</li>\r\n                <li>At least one numeric</li>\r\n                <li>Minimum 8 characters</li>\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"container mt-5 \">\r\n            <div className=\"form-demo col-lg-6\">\r\n                <Dialog visible={showMessage} onHide={() => setShowMessage(false)} position=\"top\" footer={dialogFooter} showHeader={false} breakpoints={{ '960px': '80vw' }} style={{ width: '30vw' }}>\r\n                    <div className=\"p-d-flex p-ai-center p-dir-col p-pt-6 p-px-3\">\r\n                        <i className=\"pi pi-check-circle\" style={{ fontSize: '5rem', color: 'var(--green-500)' }}></i>\r\n                        <h5>Registration Successful!</h5>\r\n                        <p style={{ lineHeight: 1.5, textIndent: '1rem' }}>\r\n                            Your account is registered under name <b>{formData.name}</b> ; it'll be valid next 30 days without activation. Please check <b>{formData.email}</b> for activation instructions.\r\n                        </p>\r\n                    </div>\r\n                </Dialog>\r\n\r\n                <div className=\"p-d-flex p-jc-center\">\r\n                    <div className=\"card\">\r\n                        <h5 className=\"p-text-center h1\">Register</h5>\r\n                        <form onSubmit={handleSubmit(onSubmit)} className=\"p-fluid\">\r\n                            <div className=\"p-field\">\r\n                                <span className=\"p-float-label\">\r\n                                    <Controller name=\"name\" control={control} rules={{ required: 'Name is required.' }} render={({ field, fieldState }) => (\r\n                                        <InputText id={field.name} {...field} autoFocus className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                    )} />\r\n                                    <label htmlFor=\"name\" className={classNames({ 'p-error': errors.name })}>Name*</label>\r\n                                </span>\r\n                                {getFormErrorMessage('name')}\r\n                            </div>\r\n                            <div className=\"p-field\">\r\n                                <span className=\"p-float-label p-input-icon-right\">\r\n                                    <i className=\"pi pi-envelope\" />\r\n                                    <Controller name=\"email\" control={control}\r\n                                        rules={{ required: 'Email is required.', pattern: { value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, message: 'Invalid email address. E.g. example@email.com' }}}\r\n                                        render={({ field, fieldState }) => (\r\n                                            <InputText id={field.name} {...field} className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                    )} />\r\n                                    <label htmlFor=\"email\" className={classNames({ 'p-error': !!errors.email })}>Email*</label>\r\n                                </span>\r\n                                {getFormErrorMessage('email')}\r\n                            </div>\r\n                            <div className=\"p-field\">\r\n                                <span className=\"p-float-label\">\r\n                                    <Controller name=\"password\" control={control} rules={{ required: 'Password is required.' }} render={({ field, fieldState }) => (\r\n                                        <Password id={field.name} {...field} toggleMask className={classNames({ 'p-invalid': fieldState.invalid })} header={passwordHeader} footer={passwordFooter} />\r\n                                    )} />\r\n                                    <label htmlFor=\"password\" className={classNames({ 'p-error': errors.password })}>Password*</label>\r\n                                </span>\r\n                                {getFormErrorMessage('password')}\r\n                            </div>\r\n                            <div className=\"p-field\">\r\n                                <span className=\"p-float-label\">\r\n                                    <Controller name=\"date\" control={control} render={({ field }) => (\r\n                                        <Calendar id={field.name} value={field.value} onChange={(e) => field.onChange(e.value)} dateFormat=\"dd/mm/yy\" mask=\"99/99/9999\" showIcon />\r\n                                    )} />\r\n                                    <label htmlFor=\"date\">Birthday</label>\r\n                                </span>\r\n                            </div>\r\n                            \r\n                            <div className=\"p-field-checkbox\">\r\n                                <Controller name=\"accept\" control={control} rules={{ required: true }} render={({ field, fieldState }) => (\r\n                                    <Checkbox inputId={field.name} onChange={(e) => field.onChange(e.checked)} checked={field.value} className={classNames({ 'p-invalid': fieldState.invalid })} />\r\n                                )} />\r\n                                <label htmlFor=\"accept\" className={classNames({ 'p-error': errors.accept })}>I agree to the terms and conditions*</label>\r\n                            </div>\r\n\r\n                            <Button type=\"submit\" label=\"Submit\" className=\"p-mt-2\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>  \r\n    );\r\n}\r\nexport default ReactHookFormDemo ;"]},"metadata":{},"sourceType":"module"}